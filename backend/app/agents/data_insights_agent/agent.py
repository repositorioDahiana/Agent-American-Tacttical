import os
from .csv_loader import CSVLoader
from .graph_loader import GraphLoader
from .stock_analyzer import StockAnalyzer
from dotenv import load_dotenv
from openai import OpenAI
from app.models import descriptive_analysis

load_dotenv()
openai_api_key = os.getenv("OPENAI_API_KEY")


class PredictiveAgent:
    def __init__(self):
        try:
            self.csv_loader = CSVLoader()
            self.df = self.csv_loader.df
            self.graph_base64 = GraphLoader().get_base64_data_url()
            self.stock_analyzer = StockAnalyzer()
        except Exception as e:
            # Re-lanzar la excepci√≥n para que se maneje en el nivel superior
            raise Exception(f"Error al inicializar el agente: {str(e)}")

    def answer_question(self, question: str) -> str:
        """Interpreta preguntas en lenguaje natural sobre el CSV, la gr√°fica o stock"""
        try:
            # Primero intentar responder con an√°lisis local
            local_response = self._try_local_answer(question)
            if local_response:
                return local_response
            
            # Si no se puede responder localmente, usar OpenAI
            return self._answer_with_openai(question)
            
        except Exception as e:
            return f"Error al procesar la pregunta: {str(e)}"

    def _try_local_answer(self, question: str) -> str:
        """Intenta responder la pregunta usando an√°lisis local"""
        question_lower = question.lower()
        
        # Saludos y preguntas de bienvenida
        if any(word in question_lower for word in ['hola', 'buenos d√≠as', 'buenas tardes', 'buenas noches', 'saludos', 'hey']):
            return self._get_greeting_response()
        
        # Preguntas sobre qu√© puede hacer el agente
        if any(word in question_lower for word in ['qu√© puedes hacer', 'qu√© sabes hacer', 'ay√∫dame', 'ayuda', 'funciones', 'capacidades']):
            return self._get_help_response()
        
        # Preguntas sobre gr√°ficas descriptivas
        if any(word in question_lower for word in ['gr√°fica', 'gr√°fico', 'tendencia', 'an√°lisis descriptivo', 'descriptivo']):
            return self._handle_descriptive_questions(question)
        
        # Preguntas sobre stock
        if any(word in question_lower for word in ['stock', 'rotaci√≥n', 'inventario', 'cantidad', 'existencias']):
            return self.stock_analyzer.answer_stock_question(question)
        
        # Preguntas sobre predicciones/importaciones
        if any(word in question_lower for word in ['predicci√≥n', 'predicciones', 'importar', 'pr√≥ximamente', 'recomendaci√≥n', 'recomendaciones', 'futuro', 'pron√≥stico']):
            return self._answer_prediction_question(question)
        
        # Preguntas generales sobre datos
        if any(word in question_lower for word in ['resumen', 'general', 'datos', 'estad√≠sticas', 'overview', 'panorama']):
            return self._get_data_summary()
        
        return None  # No se puede responder localmente

    def _get_greeting_response(self) -> str:
        """Genera una respuesta de saludo personalizada"""
        import datetime
        hour = datetime.datetime.now().hour
        
        if 5 <= hour < 12:
            greeting = "¬°Buenos d√≠as! üåÖ"
        elif 12 <= hour < 18:
            greeting = "¬°Buenas tardes! ‚òÄÔ∏è"
        else:
            greeting = "¬°Buenas noches! üåô"
        
        response = f"{greeting}\n\n"
        response += "Soy tu asistente anal√≠tico especializado en datos de importaci√≥n y stock de American Tactical. "
        response += "Puedo ayudarte con:\n\n"
        response += "üìä **An√°lisis Descriptivo:**\n"
        response += "‚Ä¢ Tendencias de importaci√≥n\n"
        response += "‚Ä¢ Productos m√°s importados\n"
        response += "‚Ä¢ Costos log√≠sticos\n"
        response += "‚Ä¢ An√°lisis de rotaci√≥n\n\n"
        response += "üîÆ **Predicciones:**\n"
        response += "‚Ä¢ Productos recomendados para importar\n"
        response += "‚Ä¢ Cantidades sugeridas\n"
        response += "‚Ä¢ Tiempos estimados\n\n"
        response += "üì¶ **Gesti√≥n de Stock:**\n"
        response += "‚Ä¢ Productos con baja rotaci√≥n\n"
        response += "‚Ä¢ Stock bajo\n"
        response += "‚Ä¢ Resumen de inventario\n\n"
        response += "¬øEn qu√© puedo ayudarte hoy?"
        
        return response

    def _get_help_response(self) -> str:
        """Proporciona informaci√≥n sobre las capacidades del agente"""
        response = "ü§ñ **Mis Capacidades:**\n\n"
        response += "**üìä An√°lisis Descriptivo:**\n"
        response += "‚Ä¢ Pregunta por 'tendencias de importaci√≥n'\n"
        response += "‚Ä¢ Pregunta por 'productos m√°s importados'\n"
        response += "‚Ä¢ Pregunta por 'costos log√≠sticos'\n"
        response += "‚Ä¢ Pregunta por 'an√°lisis de rotaci√≥n'\n\n"
        response += "**üîÆ Predicciones:**\n"
        response += "‚Ä¢ Pregunta por 'predicciones de importaci√≥n'\n"
        response += "‚Ä¢ Pregunta por 'productos recomendados'\n"
        response += "‚Ä¢ Pregunta por 'cantidades sugeridas'\n\n"
        response += "**üì¶ Stock:**\n"
        response += "‚Ä¢ Pregunta por 'productos con baja rotaci√≥n'\n"
        response += "‚Ä¢ Pregunta por 'stock bajo'\n"
        response += "‚Ä¢ Pregunta por 'resumen de inventario'\n\n"
        response += "**üìà General:**\n"
        response += "‚Ä¢ Pregunta por 'resumen general'\n"
        response += "‚Ä¢ Pregunta por 'estad√≠sticas'\n\n"
        response += "¬°Solo dime qu√© te interesa saber!"
        
        return response

    def _handle_descriptive_questions(self, question: str) -> str:
        """Maneja preguntas espec√≠ficas sobre an√°lisis descriptivo"""
        question_lower = question.lower()
        
        # Mapeo de palabras clave a gr√°ficas espec√≠ficas
        graph_mapping = {
            'tendencia': 'trend_imports',
            'tendencias': 'trend_imports',
            'hist√≥rico': 'trend_imports',
            'hist√≥rica': 'trend_imports',
            'productos m√°s': 'top_imported_products',
            'top': 'top_imported_products',
            'm√°s importados': 'top_imported_products',
            'costo log√≠stico': 'logistics_cost_trend',
            'costos log√≠sticos': 'logistics_cost_trend',
            'log√≠stica': 'logistics_cost_trend',
            'rotaci√≥n': 'low_rotation_high_margin',
            'margen': 'low_rotation_high_margin',
            'baja rotaci√≥n': 'low_rotation_high_margin'
        }
        
        # Buscar coincidencias
        for keyword, graph_id in graph_mapping.items():
            if keyword in question_lower:
                return self._summarize_descriptive_graph(graph_id)
        
        # Si no encuentra coincidencia espec√≠fica, dar un resumen general
        return self._get_descriptive_overview()

    def _get_descriptive_overview(self) -> str:
        """Proporciona un resumen general de los an√°lisis descriptivos disponibles"""
        response = "üìä **An√°lisis Descriptivo Disponible:**\n\n"
        response += "Tenemos varios an√°lisis que pueden interesarte:\n\n"
        response += "**üìà Tendencias de Importaci√≥n:**\n"
        response += "Muestra c√≥mo han variado las importaciones a lo largo del tiempo, identificando patrones estacionales y cambios en la demanda.\n\n"
        response += "**üèÜ Productos M√°s Importados:**\n"
        response += "Revela cu√°les son los productos con mayor movimiento en el √∫ltimo trimestre, ayudando a enfocar esfuerzos comerciales.\n\n"
        response += "**üöö Costos Log√≠sticos:**\n"
        response += "Analiza la evoluci√≥n de los gastos de transporte y log√≠stica, clave para la rentabilidad del negocio.\n\n"
        response += "**‚öñÔ∏è An√°lisis de Rotaci√≥n:**\n"
        response += "Identifica productos con baja rotaci√≥n pero alto margen, oportunidades para estrategias de venta espec√≠ficas.\n\n"
        response += "¬øCu√°l de estos an√°lisis te gustar√≠a explorar?"
        
        return response

    def _summarize_descriptive_graph(self, graph_id: str) -> str:
        """Genera un resumen textual detallado de la gr√°fica descriptiva solicitada."""
        try:
            if graph_id == 'trend_imports':
                response = "üìà **Tendencias Hist√≥ricas de Importaci√≥n:**\n\n"
                response += "Este an√°lisis muestra la evoluci√≥n temporal de las importaciones, permitiendo identificar:\n\n"
                response += "‚Ä¢ **Patrones estacionales** - Picos y valles en ciertos periodos del a√±o\n"
                response += "‚Ä¢ **Tendencias de crecimiento** - Si las importaciones aumentan o disminuyen\n"
                response += "‚Ä¢ **Anomal√≠as** - Periodos con comportamiento inusual\n"
                response += "‚Ä¢ **Ciclos de demanda** - Fluctuaciones regulares en el tiempo\n\n"
                response += "üí° **Insight:** Esta informaci√≥n es crucial para planificar futuras importaciones y optimizar la cadena de suministro."
                
            elif graph_id == 'top_imported_products':
                response = "üèÜ **Productos M√°s Importados:**\n\n"
                response += "Este ranking revela los productos con mayor demanda en el √∫ltimo trimestre:\n\n"
                response += "‚Ä¢ **Productos estrella** - Los de mayor movimiento\n"
                response += "‚Ä¢ **Preferencias del mercado** - Qu√© productos son m√°s populares\n"
                response += "‚Ä¢ **Oportunidades de negocio** - Productos con alta demanda\n"
                response += "‚Ä¢ **Estrategias de inventario** - En qu√© enfocar los esfuerzos\n\n"
                response += "üí° **Insight:** Enfoca tus recursos en estos productos de alto rendimiento para maximizar ventas."
                
            elif graph_id == 'logistics_cost_trend':
                response = "üöö **Tendencia de Costos Log√≠sticos:**\n\n"
                response += "Este an√°lisis muestra la evoluci√≥n de los gastos asociados al transporte:\n\n"
                response += "‚Ä¢ **Eficiencia log√≠stica** - Si los costos est√°n optimizados\n"
                response += "‚Ä¢ **Impacto en rentabilidad** - C√≥mo afectan los costos al margen\n"
                response += "‚Ä¢ **Oportunidades de ahorro** - D√≥nde reducir gastos\n"
                response += "‚Ä¢ **Tendencias del mercado** - Cambios en costos de transporte\n\n"
                response += "üí° **Insight:** Optimizar estos costos puede mejorar significativamente la rentabilidad del negocio."
                
            elif graph_id == 'low_rotation_high_margin':
                response = "‚öñÔ∏è **An√°lisis de Rotaci√≥n vs Margen:**\n\n"
                response += "Este an√°lisis identifica productos especiales:\n\n"
                response += "‚Ä¢ **Productos premium** - Baja rotaci√≥n pero alto margen\n"
                response += "‚Ä¢ **Oportunidades de promoci√≥n** - Productos que pueden venderse m√°s\n"
                response += "‚Ä¢ **Estrategias de precios** - Productos con potencial de mayor precio\n"
                response += "‚Ä¢ **Diversificaci√≥n** - Productos nicho con buena rentabilidad\n\n"
                response += "üí° **Insight:** Estos productos son ideales para campa√±as espec√≠ficas o estrategias de precios premium."
                
            else:
                response = "‚ùì No se encontr√≥ una gr√°fica descriptiva espec√≠fica para tu pregunta.\n\n"
                response += "Puedes preguntar por:\n"
                response += "‚Ä¢ Tendencias de importaci√≥n\n"
                response += "‚Ä¢ Productos m√°s importados\n"
                response += "‚Ä¢ Costos log√≠sticos\n"
                response += "‚Ä¢ An√°lisis de rotaci√≥n"
            
            return response
            
        except Exception as e:
            return f"Error al analizar la gr√°fica descriptiva: {str(e)}"

    def _answer_prediction_question(self, question: str) -> str:
        """Responde preguntas sobre predicciones usando datos locales"""
        try:
            # Usar las columnas correctas del archivo
            top_products = self.df.sort_values(by="cantidad_a_importar", ascending=False).head(5)
            
            response = "üîÆ **Predicciones de Importaci√≥n:**\n\n"
            response += "Bas√°ndome en el an√°lisis hist√≥rico de ventas y patrones de demanda, aqu√≠ est√°n mis recomendaciones:\n\n"
            response += "**üèÜ Top 5 productos recomendados para importar:**\n\n"
            
            for i, (_, row) in enumerate(top_products.iterrows(), 1):
                response += f"{i}. **{row['normalized_description']}**\n"
                response += f"   üì¶ Cantidad sugerida: **{round(row['cantidad_a_importar'], 2)}** unidades\n"
                response += f"   ‚è∞ Tiempo estimado: **{round(row['dias_hasta_proxima_importacion'], 1)}** d√≠as\n"
                response += f"   üìä Prioridad: **Alta**\n\n"
            
            response += "**üí° Insights adicionales:**\n"
            response += "‚Ä¢ Estas predicciones se basan en algoritmos de machine learning\n"
            response += "‚Ä¢ Consideran patrones hist√≥ricos de venta y estacionalidad\n"
            response += "‚Ä¢ Se actualizan autom√°ticamente con nuevos datos\n"
            response += "‚Ä¢ Recomiendo revisar estas predicciones semanalmente\n\n"
            response += "¬øTe gustar√≠a que profundice en alg√∫n producto espec√≠fico?"
            
            return response
            
        except Exception as e:
            return f"Error al analizar predicciones: {str(e)}"

    def _get_data_summary(self) -> str:
        """Genera un resumen general de los datos disponibles"""
        try:
            total_products = len(self.df)
            avg_quantity = self.df["cantidad_a_importar"].mean()
            avg_days = self.df["dias_hasta_proxima_importacion"].mean()
            
            response = "üìä **Resumen General de Datos:**\n\n"
            response += "**üìà Estad√≠sticas Principales:**\n"
            response += f"‚Ä¢ **Total de productos analizados:** {total_products:,}\n"
            response += f"‚Ä¢ **Cantidad promedio a importar:** {avg_quantity:.2f} unidades\n"
            response += f"‚Ä¢ **Tiempo promedio estimado:** {avg_days:.1f} d√≠as\n\n"
            
            # Agregar estad√≠sticas adicionales
            max_quantity = self.df["cantidad_a_importar"].max()
            min_quantity = self.df["cantidad_a_importar"].min()
            response += "**üìä Rango de Cantidades:**\n"
            response += f"‚Ä¢ **M√°xima cantidad:** {max_quantity:.2f} unidades\n"
            response += f"‚Ä¢ **M√≠nima cantidad:** {min_quantity:.2f} unidades\n\n"
            
            # Agregar resumen de stock si est√° disponible
            stock_summary = self.stock_analyzer.get_stock_summary()
            if not stock_summary.startswith("Error"):
                response += "---\n" + stock_summary
            
            response += "\n**üéØ Pr√≥ximos pasos recomendados:**\n"
            response += "‚Ä¢ Revisar las predicciones de importaci√≥n\n"
            response += "‚Ä¢ Analizar las tendencias descriptivas\n"
            response += "‚Ä¢ Evaluar el estado del inventario\n"
            response += "‚Ä¢ Planificar las pr√≥ximas importaciones"
            
            return response
            
        except Exception as e:
            return f"Error al generar resumen: {str(e)}"

    def _answer_with_openai(self, question: str) -> str:
        """Responde usando OpenAI como fallback"""
        if not openai_api_key:
            return "Error: No se encontr√≥ la clave de API de OpenAI. Verifica la variable de entorno OPENAI_API_KEY."

        try:
            context = self._build_context()

            client = OpenAI(api_key=openai_api_key)
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "Eres un asistente anal√≠tico especializado en datos de importaci√≥n y stock de American Tactical. Responde en espa√±ol de manera clara y profesional. Usa emojis para hacer las respuestas m√°s amigables. Proporciona insights √∫tiles y recomendaciones pr√°cticas."},
                    {"role": "user", "content": f"{context}\n\nPregunta: {question}"}
                ],
                temperature=0.3,
                max_tokens=500
            )

            return response.choices[0].message.content.strip()
        except Exception as e:
            return f"Error al procesar con OpenAI: {str(e)}"

    def _build_context(self) -> str:
        """Crea contexto para el agente a partir de los datos actuales"""
        try:
            top_products = self.df.sort_values(by="cantidad_a_importar", ascending=False).head(5)
            context_lines = ["üìä **Contexto de Datos Actuales:**\n"]
            context_lines.append("Top 5 productos a importar pr√≥ximamente:\n")
            for i, (_, row) in enumerate(top_products.iterrows(), 1):
                context_lines.append(
                    f"{i}. {row['normalized_description']} ‚Üí {round(row['cantidad_a_importar'], 2)} unidades en {round(row['dias_hasta_proxima_importacion'], 1)} d√≠as"
                )
            
            # Agregar estad√≠sticas generales
            total_products = len(self.df)
            avg_quantity = self.df["cantidad_a_importar"].mean()
            context_lines.append(f"\nüìà **Estad√≠sticas:** {total_products} productos analizados, promedio de {avg_quantity:.2f} unidades por producto")
            
            return "\n".join(context_lines)
        except Exception as e:
            return f"Error al construir el contexto: {str(e)}"
